import { NextRequest, NextResponse } from 'next/server'
import { Pool } from 'pg'

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
})

// Ëµ∑ÂãïÊôÇ„Ç≠„É£„ÉÉ„Ç∑„É•„Å®„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
let COMPANIES_CACHE: any[] = []
let INDUSTRY_INDEX = new Map<string, any[]>()
let CAPITAL_INDEX = new Map<number, any[]>()
let LISTING_INDEX = new Map<string, any[]>()
let PRESS_TYPE_INDEX = new Map<string, any[]>()
let CACHE_INITIALIZED = false
let CACHE_INITIALIZING = false

export async function POST(request: NextRequest) {
  const startTime = Date.now()
  try {
    let body = {}
    try {
      const text = await request.text()
      if (text.trim()) {
        body = JSON.parse(text)
      }
    } catch (parseError) {
      console.log('Request body parsing fallback:', parseError)
      body = {}
    }

    const {
      companyName,
      industry,
      pressReleaseType,
      listingStatus,
      capitalMin,
      capitalMax,
      establishedYearMin,
      establishedYearMax,
      deliveryDateFrom,
      deliveryDateTo,
      page = 1,
      limit = 1000000,
      exportAll = false,
      tableOnly = false
    } = body

    // „ÉÜ„Éº„Éñ„É´Â∞ÇÁî®„É™„ÇØ„Ç®„Çπ„ÉàÊôÇ„ÅØ50‰ª∂„Åö„Å§„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØÂà∂Èôê„Å™„Åó
    const actualLimit = tableOnly ? 50 : (exportAll ? 1000000 : limit)

    const offset = exportAll ? 0 : (page - 1) * actualLimit
    
    // „Éâ„É°„Ç§„É≥ÊäΩÂá∫Èñ¢Êï∞
    function extractDomain(url: string): string | null {
      if (!url || !url.trim()) return null
      try {
        const cleanUrl = url.trim()
        // http„Åæ„Åü„ÅØhttps„ÅßÂßã„Åæ„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØËøΩÂä†
        const fullUrl = cleanUrl.match(/^https?:\/\//) ? cleanUrl : `https://${cleanUrl}`
        const domain = new URL(fullUrl).hostname.toLowerCase()
        // www.„ÇíÈô§Âéª
        return domain.replace(/^www\./, '')
      } catch {
        return null
      }
    }

    // ‰ºöÁ§æÂêçÊ≠£Ë¶èÂåñÈñ¢Êï∞
    function normalizeCompanyName(name: string): string {
      if (!name || !name.trim()) return 'no-name'
      return name.trim()
        .toLowerCase()
        .replace(/Ê†™Âºè‰ºöÁ§æ|ÔºàÊ†™Ôºâ|\(Ê†™\)|ÊúâÈôê‰ºöÁ§æ|ÂêàÂêå‰ºöÁ§æ|co\.,ltd\.|ltd\.|inc\.|corp\./g, '')
        .replace(/\s+/g, '')
    }

    // „Ç≠„É£„ÉÉ„Ç∑„É•ÂàùÊúüÂåñÈñ¢Êï∞
    async function initializeCache() {
      if (CACHE_INITIALIZED || CACHE_INITIALIZING) return

      CACHE_INITIALIZING = true
      console.log('üöÄ Initializing companies cache...')

      // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆöÔºà30ÁßíÔºâ
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Cache initialization timeout')), 30000)
      })

      try {
        await Promise.race([initializeCacheInternal(), timeoutPromise])
      } catch (error) {
        console.error('‚ùå Cache initialization failed:', error)
        CACHE_INITIALIZED = false
        CACHE_INITIALIZING = false
      }
    }

    // ÂÆüÈöõ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•ÂàùÊúüÂåñÂá¶ÁêÜ
    async function initializeCacheInternal() {
      try {
        const client = await pool.connect()

        try {
          // ÂÖ®‰ª∂ÂèñÂæó
          const searchQuery = `
            SELECT *
            FROM prtimes_companies
            WHERE company_website IS NOT NULL AND company_website != '' AND company_website != '-'
            ORDER BY delivery_date DESC
          `

          const companiesResult = await client.query(searchQuery)
          console.log(`üìä Loaded ${companiesResult.rows.length} companies from database`)

          // „Éâ„É°„Ç§„É≥„Éô„Éº„ÇπÈáçË§áÈô§Âéª
          const domainMap = new Map()

          companiesResult.rows.forEach(company => {
            const domain = extractDomain(company.company_website)
            const normalizedName = normalizeCompanyName(company.company_name)
            const key = domain || normalizedName

            if (!domainMap.has(key)) {
              domainMap.set(key, [])
            }
            domainMap.get(key).push(company)
          })

          // ÂêÑ„Ç∞„É´„Éº„Éó„Åã„ÇâÊúÄÊñ∞„ÅÆ„Éó„É¨„Çπ„É™„É™„Éº„Çπ„ÇíÈÅ∏Êäû
          const uniqueCompanies = Array.from(domainMap.values()).map(companyGroup => {
            const sortedCompanies = companyGroup.sort((a: any, b: any) =>
              new Date(b.delivery_date).getTime() - new Date(a.delivery_date).getTime()
            )
            return sortedCompanies[0]
          })

          COMPANIES_CACHE = uniqueCompanies
          console.log(`‚úÖ Deduplicated to ${uniqueCompanies.length} unique companies`)

          // „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊßãÁØâ
          console.log('üîç Building search indexes...')
          INDUSTRY_INDEX.clear()
          CAPITAL_INDEX.clear()
          LISTING_INDEX.clear()
          PRESS_TYPE_INDEX.clear()

          uniqueCompanies.forEach(company => {
            // Ê•≠Á®ÆÂà•„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
            if (company.business_category) {
              if (!INDUSTRY_INDEX.has(company.business_category)) {
                INDUSTRY_INDEX.set(company.business_category, [])
              }
              INDUSTRY_INDEX.get(company.business_category)!.push(company)
            }

            // Ë≥áÊú¨ÈáëÂà•„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÔºà1000‰∏áÂÜÜÂçò‰ΩçÔºâ
            if (company.capital_amount_numeric) {
              const capitalRange = Math.floor(company.capital_amount_numeric / 10000) * 10000
              if (!CAPITAL_INDEX.has(capitalRange)) {
                CAPITAL_INDEX.set(capitalRange, [])
              }
              CAPITAL_INDEX.get(capitalRange)!.push(company)
            }

            // ‰∏äÂ†¥Âå∫ÂàÜÂà•„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
            if (company.listing_status) {
              if (!LISTING_INDEX.has(company.listing_status)) {
                LISTING_INDEX.set(company.listing_status, [])
              }
              LISTING_INDEX.get(company.listing_status)!.push(company)
            }

            // „Éó„É¨„Çπ„É™„É™„Éº„ÇπÁ®ÆÈ°ûÂà•„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
            if (company.press_release_type) {
              if (!PRESS_TYPE_INDEX.has(company.press_release_type)) {
                PRESS_TYPE_INDEX.set(company.press_release_type, [])
              }
              PRESS_TYPE_INDEX.get(company.press_release_type)!.push(company)
            }
          })

          CACHE_INITIALIZED = true
          console.log(`üéâ Cache initialization completed! Indexes built:`)
          console.log(`   - Industries: ${INDUSTRY_INDEX.size}`)
          console.log(`   - Capital ranges: ${CAPITAL_INDEX.size}`)
          console.log(`   - Listing status: ${LISTING_INDEX.size}`)
          console.log(`   - Press release types: ${PRESS_TYPE_INDEX.size}`)

        } finally {
          client.release()
        }
      } catch (error) {
        console.error('‚ùå Cache initialization failed:', error)
        CACHE_INITIALIZED = false
      } finally {
        CACHE_INITIALIZING = false
      }
    }

    // „Ç≠„É£„ÉÉ„Ç∑„É•ÂàùÊúüÂåñÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ
    if (!CACHE_INITIALIZED) {
      await initializeCache()
    }

    // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÂæìÊù•„ÅÆÊñπÊ≥ï„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    if (!CACHE_INITIALIZED) {
      console.warn('‚ö†Ô∏è Cache not available, falling back to database query')

      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÂæìÊù•„ÅÆ„Éá„Éº„Çø„Éô„Éº„ÇπÊ§úÁ¥¢
      const client = await pool.connect()
      try {
        const searchQuery = `
          SELECT *
          FROM prtimes_companies
          WHERE company_website IS NOT NULL AND company_website != '' AND company_website != '-'
          ORDER BY delivery_date DESC
          LIMIT 1000
        `

        const companiesResult = await client.query(searchQuery)
        const responseTime = Date.now() - startTime

        return NextResponse.json({
          companies: companiesResult.rows.slice(0, 50).map(row => ({
            id: row.id,
            deliveryDate: row.delivery_date,
            pressReleaseUrl: row.press_release_url,
            pressReleaseTitle: row.press_release_title,
            pressReleaseCategory1: row.press_release_category1,
            pressReleaseCategory2: row.press_release_category2,
            companyName: row.company_name,
            companyWebsite: row.company_website,
            industry: row.business_category,
            address: row.address,
            phoneNumber: row.phone_number,
            representative: row.representative,
            listingStatus: row.listing_status,
            capitalAmountText: row.capital_amount_text,
            establishedDateText: row.established_date_text,
            capitalAmountNumeric: row.capital_amount_numeric,
            establishedYear: row.established_year,
            establishedMonth: row.established_month,
            createdAt: row.created_at,
            updatedAt: row.updated_at
          })),
          pagination: {
            currentPage: 1,
            totalPages: Math.ceil(companiesResult.rows.length / 50),
            totalCount: companiesResult.rows.length,
            hasNextPage: companiesResult.rows.length > 50,
            hasPrevPage: false
          },
          _responseTime: responseTime,
          _cache: 'fallback'
        })
      } finally {
        client.release()
      }
    }

    // È´òÈÄü„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºà„É°„É¢„É™ÂÜÖÊ§úÁ¥¢Ôºâ
    console.log('üîç Starting fast search with filters:', body)

    let filteredCompanies = COMPANIES_CACHE

    // ‰ºöÁ§æÂêç„Éï„Ç£„É´„Çø
    if (companyName) {
      filteredCompanies = filteredCompanies.filter(company =>
        company.company_name.toLowerCase().includes(companyName.toLowerCase())
      )
    }

    // Ê•≠Á®Æ„Éï„Ç£„É´„ÇøÔºà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩøÁî®Ôºâ
    if (industry && industry.length > 0) {
      const industryResults = new Set<any>()
      industry.forEach((ind: string) => {
        const companiesInIndustry = INDUSTRY_INDEX.get(ind) || []
        companiesInIndustry.forEach(company => industryResults.add(company))
      })
      filteredCompanies = filteredCompanies.filter(company => industryResults.has(company))
    }

    // „Éó„É¨„Çπ„É™„É™„Éº„ÇπÁ®ÆÈ°û„Éï„Ç£„É´„ÇøÔºà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩøÁî®Ôºâ
    if (pressReleaseType && pressReleaseType.length > 0) {
      const pressTypeResults = new Set<any>()
      pressReleaseType.forEach((type: string) => {
        const companiesWithType = PRESS_TYPE_INDEX.get(type) || []
        companiesWithType.forEach(company => pressTypeResults.add(company))
      })
      filteredCompanies = filteredCompanies.filter(company => pressTypeResults.has(company))
    }

    // ‰∏äÂ†¥Âå∫ÂàÜ„Éï„Ç£„É´„ÇøÔºà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩøÁî®Ôºâ
    if (listingStatus && listingStatus.length > 0) {
      const listingResults = new Set<any>()
      listingStatus.forEach((status: string) => {
        const companiesWithStatus = LISTING_INDEX.get(status) || []
        companiesWithStatus.forEach(company => listingResults.add(company))
      })
      filteredCompanies = filteredCompanies.filter(company => listingResults.has(company))
    }

    // Ë≥áÊú¨Èáë„Éï„Ç£„É´„Çø
    if (capitalMin !== undefined && capitalMin > 0) {
      filteredCompanies = filteredCompanies.filter(company =>
        company.capital_amount_numeric && company.capital_amount_numeric >= capitalMin
      )
    }

    if (capitalMax !== undefined && capitalMax > 0) {
      filteredCompanies = filteredCompanies.filter(company =>
        company.capital_amount_numeric && company.capital_amount_numeric <= capitalMax
      )
    }

    // Ë®≠Á´ãÂπ¥„Éï„Ç£„É´„Çø
    if (establishedYearMin !== undefined && establishedYearMin > 0) {
      filteredCompanies = filteredCompanies.filter(company =>
        company.established_year && company.established_year >= establishedYearMin
      )
    }

    if (establishedYearMax !== undefined && establishedYearMax > 0) {
      filteredCompanies = filteredCompanies.filter(company =>
        company.established_year && company.established_year <= establishedYearMax
      )
    }

    // ÈÖç‰ø°Êó•„Éï„Ç£„É´„Çø
    if (deliveryDateFrom) {
      const fromDate = new Date(deliveryDateFrom)
      filteredCompanies = filteredCompanies.filter(company =>
        company.delivery_date && new Date(company.delivery_date) >= fromDate
      )
    }

    if (deliveryDateTo) {
      const toDate = new Date(deliveryDateTo)
      filteredCompanies = filteredCompanies.filter(company =>
        company.delivery_date && new Date(company.delivery_date) <= toDate
      )
    }

    // „ÇΩ„Éº„ÉàÔºàÈÖç‰ø°Êó•ÈôçÈ†ÜÔºâ
    filteredCompanies.sort((a: any, b: any) =>
      new Date(b.delivery_date).getTime() - new Date(a.delivery_date).getTime()
    )

    const totalCount = filteredCompanies.length

    // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Âá¶ÁêÜ
    const startIndex = exportAll ? 0 : offset
    const endIndex = exportAll ? filteredCompanies.length : offset + actualLimit
    const paginatedCompanies = filteredCompanies.slice(startIndex, endIndex)

    const totalPages = Math.ceil(totalCount / actualLimit)
    const responseTime = Date.now() - startTime

    console.log(`‚úÖ Fast search completed: ${totalCount} results in ${responseTime}ms`)

    return NextResponse.json({
      companies: paginatedCompanies.map(row => ({
        id: row.id,
        deliveryDate: row.delivery_date,
        pressReleaseUrl: row.press_release_url,
        pressReleaseTitle: row.press_release_title,
        pressReleaseCategory1: row.press_release_category1,
        pressReleaseCategory2: row.press_release_category2,
        companyName: row.company_name,
        companyWebsite: row.company_website,
        industry: row.business_category,
        address: row.address,
        phoneNumber: row.phone_number,
        representative: row.representative,
        listingStatus: row.listing_status,
        capitalAmountText: row.capital_amount_text,
        establishedDateText: row.established_date_text,
        capitalAmountNumeric: row.capital_amount_numeric,
        establishedYear: row.established_year,
        establishedMonth: row.established_month,
        createdAt: row.created_at,
        updatedAt: row.updated_at
      })),
      pagination: {
        currentPage: page,
        totalPages,
        totalCount,
        hasNextPage: page < totalPages,
        hasPrevPage: page > 1
      },
      _responseTime: responseTime,
      _cache: 'hit'
    })
  } catch (error) {
    console.error('PR TIMES search error:', error)
    return NextResponse.json(
      { error: 'Failed to search PR TIMES companies' },
      { status: 500 }
    )
  }
}